---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

// === L·∫•y t·∫•t c·∫£ b√†i vi·∫øt t·ª´ nhi·ªÅu collection ===
export async function getStaticPaths() {
  const allPosts = await Promise.all([
    getCollection('posts'),
    getCollection('java-network-series'),
    getCollection('javascript-network-series')
  ]).then(collections => collections.flat());

  return allPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// === H√†m x·ª≠ l√Ω link (chuy·ªÉn ./01-x.md -> /blog/01-x/) ===
function normalizeLink(link) {
  if (!link) return null;
  
  // N·∫øu link ƒë√£ c√≥ base path, tr·∫£ v·ªÅ nguy√™n v·∫πn
  if (link.startsWith('/Kant_Nguyen_Astro_Blog/blog/')) {
    return link;
  }
  
  // N·∫øu link ƒë√£ c√≥ base path nh∆∞ng thi·∫øu trailing slash, th√™m v√†o
  if (link.startsWith('/Kant_Nguyen_Astro_Blog/blog/') && !link.endsWith('/')) {
    return link + '/';
  }
  
  // X·ª≠ l√Ω link t∆∞∆°ng ƒë·ªëi ho·∫∑c .md
  const clean = link.replace('./', '').replace('.md', '').replace(/^\//, '');
  return `/Kant_Nguyen_Astro_Blog/blog/${clean}/`;
}

const prevLink = normalizeLink(post.data.prev);
const nextLink = normalizeLink(post.data.next);
---

<BaseLayout title={`${post.data.title} - Kant Nguy·ªÖn`}>
  <Navbar />
  
  <main class="min-h-screen bg-bgLight dark:bg-bgDark">
    <!-- Article Header -->
    <section class="pb-16 bg-gradient-to-br from-primary/5 to-purple-600/5">
      <div class="max-w-4xl mx-auto px-4">
        <div class="text-center mb-8">
          {post.data.series && (
            <span class="inline-block px-4 py-2 bg-accent text-gray-900 text-sm font-semibold rounded-full mb-4">
              {post.data.series}
            </span>
          )}
          <h1 class="text-4xl md:text-5xl font-bold mb-6 gradient-text">
            {post.data.title}
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto mb-6">
            {post.data.description}
          </p>
          
          <div class="flex items-center justify-center space-x-6 text-sm text-gray-500 dark:text-gray-400">
            <span>{new Date(post.data.date).toLocaleDateString('vi-VN')}</span>
            <span>‚Ä¢</span>
            <span>{Math.ceil(post.body.split(/\s+/).length / 200)} ph√∫t ƒë·ªçc</span>
          </div>
          
          <div class="flex flex-wrap justify-center gap-2 mt-6">
            {post.data.tags?.map(tag => (
              <span class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-md">
                {tag}
              </span>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Article Content -->
    <section class="py-16">
      <div class="max-w-4xl mx-auto px-4">
        <article class="prose prose-lg max-w-none dark:prose-invert">
          <Content />
        </article>

        <!-- Series Overview Section -->
        {post.data.series && (
          <section class="mt-16 mb-8 pt-12 border-t border-gray-200 dark:border-gray-700">
            <div class="max-w-4xl mx-auto px-4">
              <h2 class="text-2xl font-bold mb-6 text-center text-primary">
                üìö {post.data.series}
              </h2>
              {
                await getCollection(post.collection).then(allSeries => {
                  const sorted = allSeries.sort((a, b) => a.slug.localeCompare(b.slug));
                  return (
                    <div class="overflow-x-auto">
                      <table class="min-w-full border border-gray-200 dark:border-gray-700 text-sm md:text-base">
                        <thead class="bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200">
                          <tr>
                            <th class="px-4 py-2 border">#</th>
                            <th class="px-4 py-2 border">B√†i vi·∫øt</th>
                            <th class="px-4 py-2 border">Li√™n k·∫øt</th>
                          </tr>
                        </thead>
                        <tbody>
                          {
                            sorted.map((item, i) => {
                              const isActive = item.slug === post.slug;
                              return (
                                <tr
                                  class={`${isActive ? 'bg-primary/10 dark:bg-primary/20 font-semibold' : 'hover:bg-gray-50 dark:hover:bg-gray-800'} transition-colors`}
                                >
                                  <td class="border px-4 py-2 text-center">{String(i).padStart(2, '0')}</td>
                                  <td class="border px-4 py-2">{item.data.title}</td>
                                  <td class="border px-4 py-2 text-center">
                                    {isActive ? (
                                      <span class="text-gray-400 italic">B·∫°n ƒëang xem</span>
                                    ) : (
                                      <a
                                        href={`/Kant_Nguyen_Astro_Blog/blog/${item.slug}/`}
                                        class="text-primary hover:text-primary/80 transition-colors"
                                      >
                                        Xem b√†i
                                      </a>
                                    )}
                                  </td>
                                </tr>
                              );
                            })
                          }
                        </tbody>
                      </table>
                    </div>
                  );
                })
              }
            </div>
          </section>
        )}

        <!-- Navigation -->
        {(prevLink || nextLink) && (
          <div class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
            <div class="flex justify-between items-center">
              {prevLink ? (
                <a href={prevLink} class="flex items-center space-x-3 text-primary hover:text-primary/80 transition-colors">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  <span>B√†i tr∆∞·ªõc</span>
                </a>
              ) : <div></div>}

              {nextLink ? (
                <a href={nextLink} class="flex items-center space-x-3 text-primary hover:text-primary/80 transition-colors">
                  <span>B√†i ti·∫øp theo</span>
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              ) : <div></div>}
            </div>
          </div>
        )}
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>

<style>
  .prose { color: rgb(55 65 81); }
  .dark .prose { color: rgb(209 213 219); }
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 { color: rgb(17 24 39); }
  .dark .prose h1, .dark .prose h2, .dark .prose h3, .dark .prose h4, .dark .prose h5, .dark .prose h6 { color: rgb(243 244 246); }
  .prose code { background-color: rgb(243 244 246); padding: 0.125rem 0.25rem; border-radius: 0.25rem; font-size: 0.875em; }
  .dark .prose code { background-color: rgb(55 65 81); }
  .prose pre { background-color: rgb(17 24 39); color: rgb(243 244 246); }
  .prose blockquote { border-left-color: rgb(99 102 241); background-color: rgb(99 102 241 / 0.05); }
</style>