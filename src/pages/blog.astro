---
import BaseLayout from '../layouts/BaseLayout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

// Get all posts from collections
const allPosts = await Promise.all([
  getCollection('posts'),
  getCollection('java-network-series'),
  getCollection('javascript-network-series')
]).then(collections => collections.flat());

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a, b) => {
  const dateA = new Date(a.data.date);
  const dateB = new Date(b.data.date);
  return dateB.getTime() - dateA.getTime();
});

// Separate posts by category
const javaPosts = sortedPosts.filter(post => 
  post.data.tags.includes('Java') || post.collection === 'java-network-series'
);
const javascriptPosts = sortedPosts.filter(post => 
  post.data.tags.includes('JavaScript') || post.collection === 'javascript-network-series'
);
const otherPosts = sortedPosts.filter(post => 
  !post.data.tags.includes('Java') && 
  !post.data.tags.includes('JavaScript') && 
  post.collection === 'posts'
);

// Get all unique tags
const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags))];

// Format date for display
function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString('vi-VN', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

// Calculate read time (rough estimate)
function calculateReadTime(content: string) {
  const wordsPerMinute = 200;
  const wordCount = content.split(/\s+/).length;
  const minutes = Math.ceil(wordCount / wordsPerMinute);
  return `${minutes} ph√∫t ƒë·ªçc`;
}
---

<BaseLayout title="Blog - Kant Nguy·ªÖn">
  <Navbar />
  
  <main class="min-h-screen bg-bgLight dark:bg-bgDark">
    <!-- Hero Section -->
    <section class="py-20 bg-gradient-to-br from-primary/5 to-purple-600/5">
      <div class="max-w-4xl mx-auto px-4 text-center">
        <h1 class="text-4xl md:text-5xl font-bold mb-6 gradient-text">
          Blog c·ªßa t√¥i
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
          Chia s·∫ª ki·∫øn th·ª©c v·ªÅ Java, Backend Development v√† Networking
        </p>
      </div>
    </section>

    <!-- Search and Filter Section -->
    <section class="py-8 bg-gray-50 dark:bg-gray-900">
      <div class="max-w-4xl mx-auto px-4">
        <!-- Search Bar -->
        <div class="mb-8">
          <div class="relative max-w-md mx-auto">
            <input 
              type="text" 
              id="searchInput"
              placeholder="T√¨m ki·∫øm b√†i vi·∫øt..." 
              class="w-full px-4 py-3 pl-12 pr-4 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
            />
            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>

        <!-- Category Filter -->
        <div class="flex flex-wrap justify-center gap-3 mb-8">
          <button class="category-btn active" data-category="all">
            T·∫•t c·∫£ ({sortedPosts.length})
          </button>
          <button class="category-btn" data-category="java">
            ‚òï Java ({javaPosts.length})
          </button>
          <button class="category-btn" data-category="javascript">
            üü® JavaScript ({javascriptPosts.length})
          </button>
          <button class="category-btn" data-category="other">
            üìö Kh√°c ({otherPosts.length})
          </button>
        </div>

        <!-- Tag Filter -->
        <div class="flex flex-wrap justify-center gap-2 mb-8">
          {allTags.map(tag => (
            <button class="tag-btn" data-tag={tag}>
              {tag}
            </button>
          ))}
        </div>
      </div>
    </section>

    <!-- Blog Posts -->
    <section class="py-16">
      <div class="max-w-4xl mx-auto px-4">
        <!-- Java Posts Section -->
        <div id="java-section" class="category-section">
          <div class="flex items-center mb-8">
            <div class="flex items-center space-x-3">
              <span class="text-3xl">‚òï</span>
              <h2 class="text-3xl font-bold text-gray-900 dark:text-white">Java Networking</h2>
            </div>
            <div class="flex-1 h-px bg-gray-300 dark:bg-gray-600 ml-4"></div>
          </div>
          <div class="space-y-8" id="java-posts">
            {javaPosts.map(post => (
              <article class="post-card bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-shadow p-6" data-tags={post.data.tags.join(',')}>
                <div class="flex items-start justify-between mb-4">
                  <div class="flex-1">
                    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 hover:text-primary transition-colors cursor-pointer">
                      <a href={`/Kant_Nguyen_Astro_Blog/blog/${post.slug}`}>{post.data.title}</a>
                    </h2>
                    <p class="text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
                      {post.data.description}
                    </p>
                  </div>
                  {post.data.series && (
                    <span class="ml-4 px-3 py-1 bg-accent text-gray-900 text-sm font-semibold rounded-full">
                      Series
                    </span>
                  )}
                </div>
                
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                    <span>{formatDate(post.data.date)}</span>
                    <span>‚Ä¢</span>
                    <span>{calculateReadTime(post.body)}</span>
                  </div>
                  
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.map(tag => (
                      <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-md">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>

        <!-- JavaScript Posts Section -->
        <div id="javascript-section" class="category-section">
          <div class="flex items-center mb-8 mt-16">
            <div class="flex items-center space-x-3">
              <span class="text-3xl">üü®</span>
              <h2 class="text-3xl font-bold text-gray-900 dark:text-white">JavaScript Networking</h2>
            </div>
            <div class="flex-1 h-px bg-gray-300 dark:bg-gray-600 ml-4"></div>
          </div>
          <div class="space-y-8" id="javascript-posts">
            {javascriptPosts.map(post => (
              <article class="post-card bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-shadow p-6" data-tags={post.data.tags.join(',')}>
                <div class="flex items-start justify-between mb-4">
                  <div class="flex-1">
                    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 hover:text-primary transition-colors cursor-pointer">
                      <a href={`/Kant_Nguyen_Astro_Blog/blog/${post.slug}`}>{post.data.title}</a>
                    </h2>
                    <p class="text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
                      {post.data.description}
                    </p>
                  </div>
                  {post.data.series && (
                    <span class="ml-4 px-3 py-1 bg-accent text-gray-900 text-sm font-semibold rounded-full">
                      Series
                    </span>
                  )}
                </div>
                
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                    <span>{formatDate(post.data.date)}</span>
                    <span>‚Ä¢</span>
                    <span>{calculateReadTime(post.body)}</span>
                  </div>
                  
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.map(tag => (
                      <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-md">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>

        <!-- Other Posts Section -->
        {otherPosts.length > 0 && (
          <div id="other-section" class="category-section">
            <div class="flex items-center mb-8 mt-16">
              <div class="flex items-center space-x-3">
                <span class="text-3xl">üìö</span>
                <h2 class="text-3xl font-bold text-gray-900 dark:text-white">B√†i vi·∫øt kh√°c</h2>
              </div>
              <div class="flex-1 h-px bg-gray-300 dark:bg-gray-600 ml-4"></div>
            </div>
            <div class="space-y-8" id="other-posts">
              {otherPosts.map(post => (
                <article class="post-card bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-shadow p-6" data-tags={post.data.tags.join(',')}>
                  <div class="flex items-start justify-between mb-4">
                    <div class="flex-1">
                      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 hover:text-primary transition-colors cursor-pointer">
                        <a href={`/Kant_Nguyen_Astro_Blog/blog/${post.slug}`}>{post.data.title}</a>
                      </h2>
                      <p class="text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
                        {post.data.description}
                      </p>
                    </div>
                    {post.data.series && (
                      <span class="ml-4 px-3 py-1 bg-accent text-gray-900 text-sm font-semibold rounded-full">
                        Series
                      </span>
                    )}
                  </div>
                  
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                      <span>{formatDate(post.data.date)}</span>
                      <span>‚Ä¢</span>
                      <span>{calculateReadTime(post.body)}</span>
                    </div>
                    
                    <div class="flex flex-wrap gap-2">
                      {post.data.tags.map(tag => (
                        <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-md">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </div>
        )}
        
        <!-- Load More Button -->
        <div class="text-center mt-12">
          <button class="px-8 py-3 bg-primary text-white rounded-lg font-semibold hover:bg-primary/90 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl">
            Xem th√™m b√†i vi·∫øt
          </button>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>

<style>
  .category-btn {
    @apply px-4 py-2 rounded-lg font-medium transition-all duration-200;
    @apply bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300;
    @apply hover:bg-gray-300 dark:hover:bg-gray-600;
  }
  
  .category-btn.active {
    @apply bg-primary text-white hover:bg-primary/90;
  }
  
  .tag-btn {
    @apply px-3 py-1 rounded-full text-sm font-medium transition-all duration-200;
    @apply bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400;
    @apply hover:bg-gray-200 dark:hover:bg-gray-600;
  }
  
  .tag-btn.active {
    @apply bg-primary text-white hover:bg-primary/90;
  }
  
  .category-section {
    @apply transition-all duration-300;
  }
  
  .category-section.hidden {
    display: none;
  }
  
  .post-card {
    @apply transition-all duration-300;
  }
  
  .post-card.hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const categoryBtns = document.querySelectorAll('.category-btn');
    const tagBtns = document.querySelectorAll('.tag-btn');
    const postCards = document.querySelectorAll('.post-card');
    const categorySections = document.querySelectorAll('.category-section');
    
    let currentCategory = 'all';
    let currentTag = null;
    let searchTerm = '';
    
    // Search functionality
    searchInput.addEventListener('input', function(e) {
      searchTerm = e.target.value.toLowerCase();
      filterPosts();
    });
    
    // Category filter
    categoryBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        // Remove active class from all buttons
        categoryBtns.forEach(b => b.classList.remove('active'));
        // Add active class to clicked button
        this.classList.add('active');
        
        currentCategory = this.dataset.category;
        filterPosts();
      });
    });
    
    // Tag filter
    tagBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        // Toggle active state
        if (this.classList.contains('active')) {
          this.classList.remove('active');
          currentTag = null;
        } else {
          // Remove active from all tag buttons
          tagBtns.forEach(b => b.classList.remove('active'));
          // Add active to clicked button
          this.classList.add('active');
          currentTag = this.dataset.tag;
        }
        filterPosts();
      });
    });
    
    function filterPosts() {
      postCards.forEach(card => {
        const title = card.querySelector('h2 a').textContent.toLowerCase();
        const description = card.querySelector('p').textContent.toLowerCase();
        const tags = card.dataset.tags.toLowerCase();
        
        let showCard = true;
        
        // Search filter
        if (searchTerm) {
          showCard = title.includes(searchTerm) || 
                    description.includes(searchTerm) || 
                    tags.includes(searchTerm);
        }
        
        // Category filter
        if (currentCategory !== 'all') {
          const cardSection = card.closest('.category-section');
          if (currentCategory === 'java' && !cardSection.id.includes('java')) {
            showCard = false;
          } else if (currentCategory === 'javascript' && !cardSection.id.includes('javascript')) {
            showCard = false;
          } else if (currentCategory === 'other' && !cardSection.id.includes('other')) {
            showCard = false;
          }
        }
        
        // Tag filter
        if (currentTag) {
          showCard = showCard && tags.includes(currentTag.toLowerCase());
        }
        
        // Show/hide card
        if (showCard) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });
      
      // Show/hide sections based on visible posts
      categorySections.forEach(section => {
        const visiblePosts = section.querySelectorAll('.post-card:not(.hidden)');
        if (visiblePosts.length === 0) {
          section.classList.add('hidden');
        } else {
          section.classList.remove('hidden');
        }
      });
    }
  });
</script>