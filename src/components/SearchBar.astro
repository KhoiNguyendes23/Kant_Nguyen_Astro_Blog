---
// Search bar component with Fuse.js integration
---

<div class="relative max-w-2xl mx-auto mb-8">
  <div class="relative">
    <input 
      type="text" 
      id="searchInput"
      placeholder="Tìm kiếm bài viết..."
      class="w-full px-4 py-3 pl-12 pr-4 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
    />
    <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
      <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
      </svg>
    </div>
    <button 
      id="clearSearch"
      class="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors hidden"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  </div>
  
  <!-- Search Results -->
  <div id="searchResults" class="absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 hidden max-h-96 overflow-y-auto">
    <div id="searchResultsList" class="p-2">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
  
  <!-- No Results Message -->
  <div id="noResults" class="absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 hidden p-4 text-center text-gray-500 dark:text-gray-400">
    Không tìm thấy bài viết nào phù hợp.
  </div>
</div>

<script>
  import Fuse from 'fuse.js';

  // Blog posts data (this would typically come from a CMS or static files)
  const blogPosts = [
    {
      title: "Lập trình mạng với Java",
      description: "Hướng dẫn chi tiết về lập trình mạng sử dụng Java, từ cơ bản đến nâng cao.",
      slug: "lap-trinh-mang-voi-java",
      date: "2024-01-15",
      tags: ["Java", "Networking", "Backend"]
    },
    {
      title: "Lập trình mạng với JavaScript",
      description: "Khám phá các kỹ thuật lập trình mạng hiện đại với JavaScript và Node.js.",
      slug: "lap-trinh-mang-voi-javascript",
      date: "2024-01-10",
      tags: ["JavaScript", "Node.js", "Networking"]
    }
  ];

  // Initialize Fuse.js
  const fuse = new Fuse(blogPosts, {
    keys: ['title', 'description', 'tags'],
    threshold: 0.3,
    includeScore: true
  });

  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');
  const searchResultsList = document.getElementById('searchResultsList');
  const noResults = document.getElementById('noResults');
  const clearSearch = document.getElementById('clearSearch');

  let searchTimeout: NodeJS.Timeout;

  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value.trim();
    
    // Clear previous timeout
    clearTimeout(searchTimeout);
    
    if (query.length === 0) {
      hideResults();
      return;
    }

    // Debounce search
    searchTimeout = setTimeout(() => {
      performSearch(query);
    }, 300);
  });

  clearSearch?.addEventListener('click', () => {
    searchInput.value = '';
    hideResults();
    searchInput.focus();
  });

  function performSearch(query: string) {
    const results = fuse.search(query);
    
    if (results.length === 0) {
      showNoResults();
      return;
    }

    showResults(results);
  }

  function showResults(results: any[]) {
    searchResultsList.innerHTML = results.map(result => {
      const post = result.item;
      const score = result.score;
      
      return `
        <a href="/blog/${post.slug}" class="block p-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg transition-colors">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <h4 class="font-semibold text-gray-900 dark:text-white mb-1">${post.title}</h4>
              <p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-2">${post.description}</p>
              <div class="flex items-center gap-2 mt-2">
                <span class="text-xs text-gray-500 dark:text-gray-400">${new Date(post.date).toLocaleDateString('vi-VN')}</span>
                <div class="flex gap-1">
                  ${post.tags.slice(0, 2).map((tag: string) => 
                    `<span class="px-2 py-1 bg-primary/10 text-primary text-xs rounded-full">${tag}</span>`
                  ).join('')}
                </div>
              </div>
            </div>
            <div class="text-xs text-gray-400 ml-2">
              ${Math.round((1 - score) * 100)}% match
            </div>
          </div>
        </a>
      `;
    }).join('');
    
    searchResults?.classList.remove('hidden');
    noResults?.classList.add('hidden');
    clearSearch?.classList.remove('hidden');
  }

  function showNoResults() {
    searchResults?.classList.add('hidden');
    noResults?.classList.remove('hidden');
    clearSearch?.classList.remove('hidden');
  }

  function hideResults() {
    searchResults?.classList.add('hidden');
    noResults?.classList.add('hidden');
    clearSearch?.classList.add('hidden');
  }

  // Hide results when clicking outside
  document.addEventListener('click', (e) => {
    if (!searchInput?.contains(e.target as Node) && !searchResults?.contains(e.target as Node)) {
      hideResults();
    }
  });

  // Update placeholder text based on language
  function updatePlaceholder() {
    const currentLang = document.documentElement.lang || 'vi';
    const placeholder = currentLang === 'vi' ? 'Tìm kiếm bài viết...' : 'Search posts...';
    if (searchInput) {
      searchInput.placeholder = placeholder;
    }
  }

  // Listen for language changes
  document.addEventListener('languageChanged', updatePlaceholder);
  
  // Initialize placeholder
  updatePlaceholder();
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
